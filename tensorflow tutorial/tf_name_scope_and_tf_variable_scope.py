# -*- coding: utf-8 -*-
"""
By default, you can not get access to the variable which already exists.
The error raise in scope4 since you try to get access a existing variable.
tf.variable_scope() has effects for tf.get_variable() by combine the scope name and the variable name.
tf.name_scope() has no effect for tf.get_variable().
"""

import tensorflow as tf

with tf.variable_scope('scope1'):
    a = tf.get_variable(name='name1', shape=[1])
    print(a.name)  # scope1/name1:0


with tf.variable_scope('scope2'):
    b =tf.get_variable(name='name1', shape=[1])
    print(b.name)  # scope2/name1:0


print('-------------------------------------------------')
with tf.name_scope('scope3'):
    c = tf.get_variable(name='name2', shape=[1])
    print(c.name)  # name2:0

    # c1 = tf.get_variable(name='name2')  # By default, you can not get access to a existing variable.
    pass


with tf.name_scope('scope4'):
    # By default, you can not get access to the variable that already exists.
    # This will raise error since you try to get access to the 'name2' variable which is generated by the codes inside the scope3..

    # d = tf.get_variable(name='name2', shape=[1])
    # print(d.name)  # name2:0

    e = tf.Variable(1, name='name3')
    print(e.name)  # scope4/name3:0

    f = tf.Variable(1, name='name3')
    print(f.name)  # scope4/name3_1:0


print('-------------------------------------------------')

if __name__ == '__main__':
    pass


